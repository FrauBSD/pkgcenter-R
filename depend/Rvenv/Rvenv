#!/bin/sh
############################################################ IDENT(1)
#
# $Title: R interpreter capable of bootstrapping custom environments $
# $Copyright: 2019-2020 Devin Teske. All rights reserved. $
# $FrauBSD: pkgcenter-R/depend/Rvenv/Rvenv 2020-07-16 19:52:42 -0700 freebsdfrau $
#
############################################################ CONFIGURATION

#
# Default R interpreter
#
DEFAULT_R=R

#
# Default library to include in .libPaths if it exists
#
DEFAULT_LIBRARY=library

#
# Default profile to source if it exists
#
DEFAULT_PROFILE=.Rvenv

############################################################ ENVIRONMENT

#
# User home directory
#
: "${HOME:=$( echo ~ )}"

#
# Debugging
#
: ${RENV_DEBUG:=}

#
# Directory for temporary files
#
: ${RENV_TMPDIR:=/tmp}

############################################################ GLOBALS

VERSION='$Version: 2.4 $'

pgm="${0##*/}" # Program basename

#
# Global exit status
#
SUCCESS=0
FAILURE=1

#
# Interpreter
#
I="$*"
R="$DEFAULT_R"
RFILE=
RFILEDIR=
RLIBRARY=

#
# Interpreter options
#
INTERACTIVE=		# -i
INTERACTIVE_NOEXIT=	# -I
NLIBPATHS=0		# -l dir
NO_ENV=			# -n
RPROFILE=		# -p file

#
# Miscellaneous
#
EXPR=
IARGS=
RARGS=
RBIN=
R_INHERITED=
TMPENV=

############################################################ I18N

msg_I_cannot_be_combined_with_Rscript="-I cannot be combined with Rscript"
msg_arg_detected="arg detected"
msg_arg_parsed="arg parsed"
msg_args_detected="args detected"
msg_args_parsed="args parsed"
msg_bad_or_missing_interpreter="Bad or missing interpreter"
msg_change_to_directory_dir="Change to directory dir."
msg_debug="DEBUG"
msg_disable_environment_features="Disable environment features."
msg_enable_debug="Enable debug. Use multiple times for extra debugging."
msg_extra_debugging_enabled="Extra debugging enabled"
msg_force_interactive_mode="Force interactive mode()."
msg_force_interactive_user="Force interactive user prompt. Implies \`-i'."
msg_found="Found"
msg_i_cannot_be_combined_with_Rscript="-i cannot be combined with Rscript"
msg_inherited="Inherited"
msg_missing="Missing"
msg_no_such_file_or_directory="No such file or directory"
msg_not_a_directory="Not a directory"
msg_options="Options"
msg_print_usage_statement_to_stderr_and_exit="Print usage statement to stderr and exit."
msg_print_version_to_stderr_and_exit="Print version to stderr and exit."
msg_source_file_instead_of="Source file instead of"
msg_usage="Usage"
msg_use_dir_instead_of="Use dir instead of"
msg_warning="WARNING"

############################################################ FUNCTIONS

have(){ type "$@" > /dev/null 2>&1; }

die()
{
	local fmt="$1"
	if [ "$fmt" ]; then
		shift 1 # fmt
		printf "%s: $fmt\n" "$pgm" "$@" >&2
	fi
	exit $FAILURE
}

usage()
{
	local optfmt="\t%-10s %s\n"
	exec >&2
	printf "$msg_usage: %s [OPTIONS] [--] " "$pgm"
	if [ "$R_INHERITED" ]; then
		printf "[file [args]]\n"
	else
		printf "[R | Rscript] [file [args]]\n"
	fi
	printf "$msg_options:\n"
	printf "$optfmt" "-C dir" "$msg_change_to_directory_dir"
	printf "$optfmt" "-D" "$msg_enable_debug"
	printf "$optfmt" "-h" "$msg_print_usage_statement_to_stderr_and_exit"
	printf "$optfmt" "-I" "$msg_force_interactive_user"
	printf "$optfmt" "-i" "$msg_force_interactive_mode"
	printf "$optfmt" "-l dir" \
	    "$msg_use_dir_instead_of \`$DEFAULT_LIBRARY'."
	printf "$optfmt" "-n" "$msg_disable_environment_features"
	printf "$optfmt" "-p file" \
	    "$msg_source_file_instead_of \`$DEFAULT_PROFILE'."
	printf "$optfmt" "-v" "$msg_print_version_to_stderr_and_exit"
	die
}

version()
{
	local v="${VERSION#*: }"
	printf "%s\n" "${v% $}" >&2
	die
}

debug()
{
	[ "$RENV_DEBUG" ] || return
	local fmt="$1"
	shift 1 # fmt
	if [ -t 1 ]; then # stdout is a tty
		printf "\e[35;1m$msg_debug\e[m %s: $fmt\n" "$pgm" "$@" >&2
	else
		printf "$msg_debug %s: $fmt\n" "$pgm" "$@" >&2
	fi
}

warn()
{
	local fmt="$1"
	shift 1 # fmt
	if [ -t 1 ]; then # stdout is a tty
		printf "\e[33;1m$msg_warning!\e[m %s: $fmt\n" "$pgm" "$@" >&2
	else
		printf "$msg_warning! %s: $fmt\n" "$pgm" "$@" >&2
	fi
}

if have realpath; then
	: good
elif have readlink; then
	realpath(){ readlink -f "$@"; }
elif have perl; then
	realpath(){ perl -le 'use Cwd; print Cwd::abs_path(@ARGV);' -- "$@"; }
else
	realpath(){ echo "$@"; }
fi

############################################################ MAIN

#
# Change behavior based on interpreter invocation name
#
if [ $# -eq 1 ]; then
	debug "1 $msg_arg_detected"
else
	debug "%u $msg_args_detected" $#
fi
n=1
while [ $n -le $# ]; do
	eval "debug 'arg$n=[%s]' \"\${$n}\""
	n=$(( $n + 1 ))
done
case "$pgm" in
*-*) # Use R based on our name
	R="R-${pgm#*-}"
	R_INHERITED=1
	debug "$msg_inherited R=[%s]" "$R"
	;;
esac

#
# Process arguments until we get to script args
#
set -- $*
if [ $# -eq 1 ]; then
	debug "1 $msg_arg_parsed"
else
	debug "%u $msg_args_parsed" $#
fi
while [ $# -ge 1 ]; do
	case "$1" in
	--) # option terminator
		debug "arg=[$1]"
		shift 1 # --
		if [ "$R_INHERITED" ]; then
			# next is R script to interpret
			RFILE="$1"
			shift 1 # RFILE
		else
			# next is R interpreter
			R="$1"
			shift 1 # R
			# Followed by script to interpret?
			if [ $# -ge 1 ]; then
				RFILE="$1"
				shift 1 # RFILE
			fi
		fi
		break
		;;
	-[Clp]) # interpreter option in need of argument
		debug "arg=[$1${2:+ $2}]"
		IARGS="$IARGS${IARGS:+ }$1"
		shift 1 # optflag
		if [ $# -ge 1 ]; then
			IARGS="$IARGS $1"
			shift 1 # optarg
		fi
		;;
	-*) # interpreter option (such as -h or -l/tmp/foobar)
		debug "arg=[$1]"
		IARGS="$IARGS${IARGS:+ }$1"
		shift 1 # opt
		;;
	*) # interp or interp + script
		debug "arg=[$1]"
		if [ "$R_INHERITED" ]; then
			# next is R script to interpret
			RFILE="$1"
			shift 1 # RFILE
		else
			# next is R interpreter
			R="$1"
			shift 1 # R
			# Followed by script to interpret?
			if [ $# -ge 1 ]; then
				RFILE="$1"
				shift 1 # RFILE
			fi
		fi
		break
	esac
done
debug "IARGS=[%s]" "$IARGS"

#
# Process remainder as script arguments
#
n=1
while [ $n -le $# ]; do
	eval arg=\"\$$n\"
	eval arg$n=\"\$arg\"
	debug "arg%u=[%s]" $n "$arg"
	RARGS="$RARGS \"\$arg$n\""
	n=$(( $n + 1 ))
done

#
# Calculate RFILEDIR from RFILE
#
case "$RFILE" in
""|/*) : leave as-is ;;
*) RFILE="$PWD/$RFILE"
esac
debug "RFILE=[%s]" "$RFILE"
[ ! "$RFILE" ] || RFILEDIR="${RFILE%/*}/"
debug "RFILEDIR=[%s]" "$RFILEDIR"

#
# Parse interpreter options
#
set -- $IARGS
while getopts C:DhIil:np:v flag; do
	case "$flag" in
	C) CHDIR="$OPTARG" ;;
	D) RENV_DEBUG=$(( ${RENV_DEBUG:-0} + 1 )) ;;
	I) INTERACTIVE=1 INTERACTIVE_NOEXIT=1 ;;
	i) INTERACTIVE=1 ;;
	l) NLIBPATHS=$(( $NLIBPATHS + 1 ))
	   eval LIBPATH$NLIBPATHS=\"\$OPTARG\" ;;
	n) NO_ENV=1 ;;
	p) RPROFILE="$OPTARG" ;;
	v) version ;; # NOTREACHED
	*) usage # NOTREACHED
	esac
done
shift $(( $OPTIND - 1 ))

#
# Extra debugging
#
case "$RENV_DEBUG" in
""|*[!0-9]*) : skip ;;
*)
	if [ $RENV_DEBUG -ge 2 ]; then
		debug "$msg_extra_debugging_enabled"
		set -x
	fi
esac

#
# Change working directory
#
if [ ! "$NO_ENV" ]; then
	if [ "$CHDIR" ]; then
		cd "$CHDIR" || die
	elif [ "$RFILEDIR" ]; then
		cd "$RFILEDIR" || die
	fi
fi
debug "PWD=[$PWD]"

#
# Expand RPROFILE if given
#
if [ ! "$NO_ENV" ]; then
	case "$RPROFILE" in
	"") : leave-empty ;;
	*) RPROFILE=$( realpath "$RPROFILE" ) || die
	esac
fi

#
# Calculate name of chosen R interpreter (R versus Rscript)
#
debug "R=[%s]" "$R"
set -- $R
RBIN="${1##*/}"

#
# Prevent non-functional option combinations
#
if [ "$RBIN" != "${RBIN#Rscript}" ]; then
	[ ! "$INTERACTIVE_NOEXIT" ] ||
		die "$msg_I_cannot_be_combined_with_Rscript"
	[ ! "$INTERACTIVE" ] ||
		die "$msg_i_cannot_be_combined_with_Rscript"
fi

#
# Get default R library path
#
case "$RBIN" in
Rscript|Rscript-*) RLIBRARY=$( echo 'cat(.libPaths(.Library))' | $R - ) ;;
*) RLIBRARY=$( $R --slave --no-restore -e 'cat(.libPaths(.Library))' )
esac 2> /dev/null || warn "%s: $msg_bad_or_missing_interpreter" "$1"
debug "RLIBRARY=[%s]" "$RLIBRARY"

#
# Find virtual environment libraries
#
n=1
if [ "$NO_ENV" ]; then
	# Prevent below loop
	n=$(( $NLIBPATHS + 1 ))
fi
while [ $n -le $NLIBPATHS ]; do
	found=
	lproj=
	eval libpath=\"\$LIBPATH$n\"
	# Translate references to home-directory
	case "$libpath" in
	\~/*) libpath="$HOME/${libpath#\~/}" ;;
	esac
	# If relative path not matching library or */library
	# check for path basename in RLIBRARY parent directory
	[ "${libpath#/}" = "$libpath" -a \
	  "${libpath##*/}" != "library" ] && lproj=1
	for dir in \
		"$libpath" \
		${lproj:+"${RLIBRARY%/*}/${libpath##*/}"} \
		${lproj:+"${RLIBRARY%/*}/altlibraries/${libpath##*/}"} \
	; do
		rdir=$( realpath "$dir" 2> /dev/null ) || continue
		dir="$rdir"
		if [ ! -e "$dir" ]; then
			debug "$msg_missing %s" "$dir"
			continue
		fi
		[ -d "$dir" ] || die "%s: $msg_not_a_directory" "$dir"
		debug "$msg_found %s" "$dir"
		found=1
		LIBPATHS="$LIBPATHS, \"$dir\""
	done
	[ "$found" ] ||
		die "%s: $msg_no_such_file_or_directory" "$libpath"
	n=$(( $n + 1 ))
done

#
# Default project library when `-l dir' not given
# NB: Skipped if `-n' given
#
if [ ! "$NO_ENV$LIBPATHS" ]; then
	dir="$DEFAULT_LIBRARY"
	if [ -d "$dir" ]; then
		debug "$msg_found %s" "$dir"
		LIBPATHS="$LIBPATHS, \"$dir\""
	elif [ -e "$dir" ]; then
		die "%s: $msg_not_a_directory" "$dir"
	else
		debug "$msg_missing %s" "$dir"
	fi
fi
LIBPATHS="${LIBPATHS#, }"

#
# Set command-line arguments
#
eval set -- $RARGS
debug "RARGS=[%s]" "$*"

#
# Generate custom R environment
#
[ ! "$LIBPATHS" ] || EXPR="$EXPR; .libPaths(c($LIBPATHS, .libPaths()))"
if [ "$NO_ENV" ]; then
	# Prevent below conditionals
	RPROFILE=
	DEFAULT_PROFILE=
fi
if [ "$RPROFILE" ]; then
	EXPR="$EXPR; Rvenv.profile.path <- c(\"$RPROFILE\")"
	EXPR="$EXPR; Rvenv.profile.name <- c(\"${RPROFILE##*/}\")"
	EXPR="$EXPR; source(Rvenv.profile.path)"
elif [ -e "$DEFAULT_PROFILE" ]; then
	EXPR="$EXPR; Rvenv.profile.path <- c(\"$DEFAULT_PROFILE\")"
	EXPR="$EXPR; Rvenv.profile.name <- c(\"${DEFAULT_PROFILE##*/}\")"
	EXPR="$EXPR; source(Rvenv.profile.path)"
fi
EXPR="$EXPR; Rvenv.file.path <- c(\"$RFILE\")"
EXPR="$EXPR; Rvenv.file.name <- c(\"${RFILE##*/}\")"
EXPR="$EXPR; Rvenv.dir.path <- c(\"${RFILEDIR:-./}\")"
[ ! "$RFILE" ] || EXPR="$EXPR; source(Rvenv.file.path)"
EXPR="${EXPR#; }"

#
# Invoke desired R interpreter to run custom environment
#
if [ "$RFILE" -a ! "$INTERACTIVE" ]; then
	case "$RBIN" in
	Rscript|Rscript-*) exec $R -e "$EXPR" "$RFILE" "$@" ;;
	*) exec $R --slave --no-restore -e "$EXPR" ${*:+--args "$@"}
	esac
else
	TMPENV=$( mktemp "$RENV_TMPDIR/$pgm.XXXXXXXX" ) || die
	[ "$INTERACTIVE_NOEXIT" ] || [ ! "$INTERACTIVE" ] || [ ! "$RFILE" ] ||
		EXPR="$EXPR; quit()"
	[ ! "$R_PROFILE_USER" ] || EXPR="$R_PROFILE_USER; $EXPR"
	echo "$EXPR" > "$TMPENV" || die
	trap 'rm -f "$TMPENV"' EXIT
	case "$RBIN" in
	Rscript|Rscript-*) R_PROFILE_USER="$TMPENV" exec $R "$@" ;;
	*)
		if [ "$RFILE" ]; then
			R_PROFILE_USER="$TMPENV" exec $R --interactive \
				--no-save -q ${*:+--args "$@"}
		else
			R_PROFILE_USER="$TMPENV" exec $R --interactive \
				${*:+--args "$@"}
		fi
	esac
fi

# NOTREACHED

################################################################################
# END
################################################################################
