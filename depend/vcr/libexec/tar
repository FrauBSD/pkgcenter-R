#!/bin/sh
############################################################ IDENT(1)
#
# $Title: Script to create R binary tarball $
# $Copyright: 2019-2020 Devin Teske. All rights reserved. $
# $FrauBSD: pkgcenter-R/depend/vcr/libexec/tar 2020-07-16 16:40:51 -0700 freebsdfrau $
#
############################################################ ENVIRONMENT

#
# Debugging
#
: ${VCR_DEBUG:=}

#
# Inherited from vcr
#
: ${VCR_PROGRAM:=vcr}

#
# Exclude these system libraries from being packed
#
LIBEXCLUDE="
	libGL.so.1
	libICE.so.6
	libSM.so.6
	libX11.so.6
	libXext.so.6
	libXrender.so.1
	libc.so.6
	libdl.so.2
	libgcc_s.so.1
	libglib-2.0.so.0
	libgobject-2.0.so.0
	libgthread-2.0.so.0
	libm.so.6
	libnsl.so.1
	libpthread.so.0
	libresolv.so.2
	librt.so.1
	libstdc++.so.6
	libutil.so.1
" # END-QUOTE

############################################################ GLOBALS

#
# Program basename and OS Glue
#
: "${UNAME_s:=$( uname -s )}"
case "$UNAME_s" in
Linux)
	pgm=$( readlink -f "$0" )
	pgm="${pgm##*/}"
	;;
*)
	pgm="${0##*/}"
esac

#
# Global exit status
#
SUCCESS=0
FAILURE=1

#
# Command-line options
#
DRYRUN=		# -n
FORCE=		# -f
HELP=		# -h
PACKLIBS=	# -l
USE_PATCHELF=	# -p

#
# Miscellaneous
#
LIBRARY=
NAME=
R_PLATFORM=
TMPDIR=

############################################################ I18N

case "${LANG:-$LC_ALL}" in
de|de_DE|de_DE.*) # German
fmt_already_exists="%s: Ist bereits vorhanden"
fmt_command_not_found="%s: Befehl nicht gefunden"
fmt_is_a_directory="%s: Ist ein verzeichnis"
fmt_no_such_file_or_directory="Keine solche datei oder ordner"
fmt_not_a_directory="%s: Kein verzeichnis"
fmt_unable_to_create_binary_archive="%s: Binärarchiv kann nicht erstellt werden"
msg_base_library="basisbibliothek (-b)"
msg_cleanup="Aufräumen"
msg_copy_contents_to_tmpdir="Kopieren Sie den Inhalt nach tmpdir"
msg_copy_system_dependencies="Kopieren Sie die systemabhängigkeiten"
msg_debug="Debuggen"
msg_dry_run_dont_actually_create_anything="Probelauf. Kreieren Sie eigentlich nichts."
msg_dry_run_enabled="Probelauf aktiviert (-n). Die endgültige installation wird nicht durchgeführt."
msg_enable_additional_debugging_statements="Aktivieren sie zusätzliche debuggen-Anweisungen."
msg_fatal="TÖDLICH"
msg_force_create_even_if_already_exists="Macht. Erstellen Sie auch, wenn bereits vorhanden."
msg_get_version="Version holen"
msg_include_system_library_dependencies="Abhängigkeiten der Systembibliothek einschließen."
msg_missing_package_or_path_argument="Fehlendes Paket- oder Pfadargument"
msg_missing_r_interpreter_argument="Fehlendes R interpreterargument"
msg_options="Optionen"
msg_print_help_message="Hilfemeldung an stderr ausgeben und beenden."
msg_produce_tarball="Tarball produzieren"
msg_success="ERFOLG"
msg_unable_to_determine_library_path="Bibliothekspfad kann nicht ermittelt werden"
msg_unable_to_determine_platform_string="Plattform-String kann nicht ermittelt werden"
msg_usage="Verwendungszweck"
msg_use_patchelf_on_executables="Verwenden Sie patchelf für ausführbare Dateien. Impliziert \`-l'."
msg_warning="ACHTUNG"
;;
he|he_IL|he_IL.*) # Hebrew
fmt_already_exists="%s: כבר קיים"
fmt_command_not_found="%s: הפקודה לא נמצאה"
fmt_is_a_directory="%s: היא ספרייה"
fmt_no_such_file_or_directory="%s: אין כזה קובץ או תקייה"
fmt_not_a_directory="%s: לא ספרייה"
fmt_unable_to_create_binary_archive="%s: לא ניתן ליצור ארכיון בינארי"
msg_base_library="(-b) ספריית בסיס"
msg_cleanup="לנקות"
msg_copy_contents_to_tmpdir="העתק תוכן ל- tmpdir"
msg_copy_system_dependencies="העתק תלות במערכת"
msg_debug="אשפוז"
msg_dry_run_dont_actually_create_anything="ריצה יבשה. אל תיצור שום דבר בעצם."
msg_dry_run_enabled="הפעלה יבשה מופעלת (-n). ההתקנה הסופית לא תתבצע."
msg_enable_additional_debugging_statements="הפעל הצהרות באגים נוספות."
msg_fatal="פאטאל"
msg_force_create_even_if_already_exists="כוח. צור גם אם כבר קיים."
msg_get_version="קבל גרסה"
msg_include_system_library_dependencies="כלול תלות בספריית מערכות."
msg_missing_package_or_path_argument="טיעון חבילה או נתיב חסר"
msg_missing_r_interpreter_argument="חסר ארגומנט המתורגמן"
msg_options="אפשרויות"
msg_print_help_message="הדפס את הודעת העזרה ל stdr ולצאת."
msg_produce_tarball="הפק כדור כדורים"
msg_success="הצלחה"
msg_unable_to_determine_library_path="לא ניתן לקבוע נתיב ספריה"
msg_unable_to_determine_platform_string="לא ניתן לקבוע מחרוזת פלטפורמה"
msg_usage="שימוש"
msg_use_patchelf_on_executables="השתמש ב- patchelf על הפעלה. מרמז על \`-l'."
msg_warning="אזהרה"
;;
ja_JP.UTF8) # Japanese (Kanji)
fmt_already_exists="%s：すでに存在します"
fmt_command_not_found="%s：コマンドが見つかりません"
fmt_is_a_directory="%s：ディレクトリです"
fmt_no_such_file_or_directory="%s：そのようなファイルまたはディレクトリはありません"
fmt_not_a_directory="%s：ディレクトリではありません"
fmt_unable_to_create_binary_archive="%s：バイナリアーカイブを作成できません"
msg_base_library="ベースライブラリ（-b）"
msg_cleanup="掃除"
msg_copy_contents_to_tmpdir="内容をtmpdirにコピーします"
msg_copy_system_dependencies="システムの依存関係をコピーする"
msg_debug="デバッグ"
msg_dry_run_dont_actually_create_anything="ドライラン。 実際には何も作成しないでください。"
msg_dry_run_enabled="ドライランが有効（-n）。 最終インストールは行われません。"
msg_enable_additional_debugging_statements="追加のデバッグステートメントを有効にします。"
msg_fatal="致命的"
msg_force_create_even_if_already_exists="力。 すでに存在していても作成します。"
msg_get_version="バージョンを取得"
msg_include_system_library_dependencies="システムライブラリの依存関係を含めます。"
msg_missing_package_or_path_argument="パッケージまたはパス引数がありません"
msg_missing_r_interpreter_argument="Rインタプリタの引数がありません"
msg_options="オプション"
msg_print_help_message="ヘルプメッセージをstderrに出力して終了します。"
msg_produce_tarball="tarballを生成する"
msg_success="成功"
msg_unable_to_determine_library_path="ライブラリパスを判別できません"
msg_unable_to_determine_platform_string="プラットフォーム文字列を判別できません"
msg_usage="使用法"
msg_use_patchelf_on_executables="実行可能ファイルに対してpatchelfを使用します。 \`-l'を意味します。"
msg_warning="警告"
;;
ja|ja_JP|ja_JP.*) # Japanese (Latin)
fmt_already_exists="%s: Sudeni sonzai shimasu"
fmt_command_not_found="%s: Komando ga mitsukarimasen"
fmt_is_a_directory="%s: Direkutoridesu"
fmt_no_such_file_or_directory="%s: Sono yōna fairu matawa direkutori wa arimasen"
fmt_not_a_directory="%s: Direkutoride wa arimasen"
fmt_unable_to_create_binary_archive="%s: Bainariākaibu o sakusei dekimasen"
msg_base_library="bēsuraiburari (-b)"
msg_cleanup="Sōji"
msg_copy_contents_to_tmpdir="Naiyō o tmpdir ni kopī shimasu"
msg_copy_system_dependencies="Shisutemu no isonkankei o kopī suru"
msg_debug="DEBAGGU"
msg_dry_run_dont_actually_create_anything="Dorairan. Jissai ni wa nani mo sakusei shinaide kudasai."
msg_dry_run_enabled="Dorairan ga yūkō (-n). Saishū insutōru wa okonawa remasen."
msg_enable_additional_debugging_statements="Tsuika no debaggusutētomento o yūkō ni shimasu."
msg_fatal="CHIMEI-TEKI"
msg_force_create_even_if_already_exists="Chikara. Sudeni sonzai shite ite mo sakusei shimasu."
msg_get_version="Bājon o shutoku"
msg_include_system_library_dependencies="システムライブラリの依存関係を含めます。"
msg_missing_package_or_path_argument="Pakkēji matawa pasu hikisū ga arimasen"
msg_missing_r_interpreter_argument="R intapurita no hikisū ga arimasen"
msg_options="Opushon"
msg_print_help_message="Herupumessēji o stderr ni shutsuryoku shite shūryō shimasu."
msg_produce_tarball="Tarball o seisei suru"
msg_success="SEIKŌ"
msg_unable_to_determine_library_path="Raiburaripasu o hanbetsu dekimasen"
msg_unable_to_determine_platform_string="Purattofōmu mojiretsu o hanbetsu dekimasen"
msg_usage="Shiyō-hō"
msg_use_patchelf_on_executables="Jikkō kanō fairu ni taishite patchelf o shiyō shimasu. \`-l' o imi shimasu."
msg_warning="KEIKOKU"
;;
pl|pl_PL|pl_PL.*) # Polish
fmt_already_exists="%s: Już istnieje"
fmt_command_not_found="%s: polecenie nie znaleziono"
fmt_is_a_directory="%s: Jest katalogiem"
fmt_no_such_file_or_directory="%s: Brak takiego pliku lub katalogu"
fmt_not_a_directory="%s: To nie jest katalog"
fmt_unable_to_create_binary_archive="%s: Nie można utworzyć archiwum binarnego"
msg_base_library="biblioteka bazowa (-b)"
msg_cleanup="Sprzątać"
msg_copy_contents_to_tmpdir="Skopiuj zawartość do tmpdir"
msg_copy_system_dependencies="Skopiuj zależności systemowe"
msg_debug="ODPLUSKWIĆ"
msg_dry_run_dont_actually_create_anything="Próba. Nie twórz niczego."
msg_dry_run_enabled="Próba włączony (-n). Ostateczna instalacja nie zostanie wykonana."
msg_enable_additional_debugging_statements="Włącz dodatkowe instrukcje debugowania."
msg_fatal="FATALNY"
msg_force_create_even_if_already_exists="Siła. Utwórz, nawet jeśli już istnieje."
msg_get_version="Pobierz wersję"
msg_include_system_library_dependencies="Uwzględnij zależności bibliotek systemowych."
msg_missing_package_or_path_argument="Brak argumentu pakietu lub ścieżki"
msg_missing_r_interpreter_argument="Brak argumentu interpretera R"
msg_options="Opcje"
msg_print_help_message="Wydrukuj komunikat pomocy na stderr i wyjdź."
msg_produce_tarball="Wyprodukuj tarball"
msg_success="POWODZENIE"
msg_unable_to_determine_library_path="Nie można określić ścieżki do biblioteki"
msg_unable_to_determine_platform_string="Nie można określić ciągu platformy"
msg_usage="Stosowanie"
msg_use_patchelf_on_executables="Użyj patchelf na plikach wykonywalnych. Implikuje \`-l'."
msg_warning="OSTRZEŻENIE"
;;
ru_RU.UTF8) # Russian (Cyrillic)
fmt_already_exists="%s: Уже существует"
fmt_command_not_found="%s: команда не найдена"
fmt_is_a_directory="%s: Это каталог"
fmt_no_such_file_or_directory="%s: Данный файл или каталог отсутствует"
fmt_not_a_directory="%s: Не каталог"
fmt_unable_to_create_binary_archive="%s: Невозможно создать бинарный архив"
msg_base_library="базовая библиотека (-b)"
msg_cleanup="Уборка"
msg_copy_contents_to_tmpdir="Скопируйте содержимое в tmpdir"
msg_copy_system_dependencies="Копировать системные зависимости"
msg_debug="ОТЛАЖИВАТЬ"
msg_dry_run_dont_actually_create_anything="Прогон, репетиция. На самом деле ничего не создавать."
msg_dry_run_enabled="Пробный запуск включен (-n). Окончательная установка не будет выполнена."
msg_enable_additional_debugging_statements="Включить дополнительные операторы отладки."
msg_fatal="ФАТАЛЬНЫЙ"
msg_force_create_even_if_already_exists="Силы. Создайте, даже если уже существует."
msg_get_version="Получить версию"
msg_include_system_library_dependencies="Включите зависимости системной библиотеки."
msg_missing_package_or_path_argument="Отсутствует аргумент пакета или пути"
msg_missing_r_interpreter_argument="Отсутствует R интерпретатора аргумент"
msg_options="Опции"
msg_print_help_message="Распечатать справочное сообщение в stderr и выйти."
msg_produce_tarball="Производить тарбол"
msg_success="УСПЕХ"
msg_unable_to_determine_library_path="Невозможно определить путь к библиотеке"
msg_unable_to_determine_platform_string="Невозможно определить строку платформы"
msg_usage="Использование"
msg_use_patchelf_on_executables="Используйте patchelf для исполняемых файлов. Подразумевает \`-l'."
msg_warning="ПРЕДУПРЕЖДЕНИЕ"
;;
ru|ru_RU|ru_RU.*) # Russian (Latin)
fmt_already_exists="%s: Uzhe sushchestvuyet"
fmt_command_not_found="%s: komanda ne naydena"
fmt_is_a_directory="%s: Eto katalog"
fmt_no_such_file_or_directory="%s: Dannyy fayl ili katalog otsutstvuyet"
fmt_not_a_directory="%s: Ne katalog"
fmt_unable_to_create_binary_archive="%s: Nevozmozhno sozdat' binarnyy arkhiv"
msg_base_library="bazovaya biblioteka (-b)"
msg_cleanup="Uborka"
msg_copy_contents_to_tmpdir="Skopiruyte soderzhimoye v tmpdir"
msg_copy_system_dependencies="Kopirovat' sistemnyye zavisimosti"
msg_debug="OTLAZHIVAT'"
msg_dry_run_dont_actually_create_anything="Progon, repetitsiya. Na samom dele nichego ne sozdavat'."
msg_dry_run_enabled="Probnyy zapusk vklyuchen (-n). Okonchatel'naya ustanovka ne budet vypolnena."
msg_enable_additional_debugging_statements="Vklyuchit' dopolnitel'nyye operatory otladki."
msg_fatal="FATAL'NYY"
msg_force_create_even_if_already_exists="Sily. Sozdayte, dazhe yesli uzhe sushchestvuyet."
msg_get_version="Poluchit' versiyu"
msg_include_system_library_dependencies="Vklyuchite zavisimosti sistemnoy biblioteki."
msg_missing_package_or_path_argument="Otsutstvuyet argument paketa ili puti"
msg_missing_r_interpreter_argument="Otsutstvuyet R interpretatora argument"
msg_options="Optsii"
msg_print_help_message="Raspechatat' spravochnoye soobshcheniye v stderr i vyyti."
msg_produce_tarball="Proizvodit' tarbol"
msg_success="USPEKH"
msg_unable_to_determine_library_path="Nevozmozhno opredelit' put' k biblioteke"
msg_unable_to_determine_platform_string="Nevozmozhno opredelit' stroku platformy"
msg_usage="Ispol'zovaniye"
msg_use_patchelf_on_executables="Ispol'zuyte patchelf dlya ispolnyayemykh faylov. Podrazumevayet \`-l'."
msg_warning="PREDUPREZHDENIYe"
;;
zh_CN.UTF8) # Chinese (Simplified)
fmt_already_exists="%s: 已经存在"
fmt_command_not_found="%s：找不到命令"
fmt_is_a_directory="%s: 是一个目录"
fmt_no_such_file_or_directory="%s: 没有相应的文件和目录"
fmt_not_a_directory="%s: 不是目录"
fmt_unable_to_create_binary_archive="%s: 无法创建二进制存档"
msg_base_library="基础库 (-b)"
msg_cleanup="清理"
msg_copy_contents_to_tmpdir="将内容复制到tmpdir"
msg_copy_system_dependencies="复制系统依赖项"
msg_debug="调试"
msg_dry_run_dont_actually_create_anything="空运行。 实际上不创建任何东西。"
msg_dry_run_enabled="启用空运行（-n）。 不会执行最终安装。"
msg_enable_additional_debugging_statements="启用其他调试语句。"
msg_fatal="致命"
msg_force_create_even_if_already_exists="力。 即使已经存在也创建。"
msg_get_version="获取版本"
msg_include_system_library_dependencies="包括系统库依赖项。"
msg_missing_package_or_path_argument="缺少包或路径参数"
msg_missing_r_interpreter_argument="缺少R解释器参数"
msg_options="选项"
msg_print_help_message="将帮助消息打印到stderr并退出。"
msg_produce_tarball="产生tarball"
msg_success="成功"
msg_unable_to_determine_library_path="无法确定库路径"
msg_unable_to_determine_platform_string="无法确定平台字符串"
msg_usage="用法"
msg_use_patchelf_on_executables="在可执行文件上使用patchelf。 表示\`-l'。"
msg_warning="警告"
;;
zh|zh_CN|zh_CN.*) # Chinese (Latin)
fmt_already_exists="%s: Yǐjīng cúnzài"
fmt_command_not_found="%s: Zhǎo bù dào mìnglìng"
fmt_is_a_directory="%s: Shì yīgè mùlù"
fmt_no_such_file_or_directory="%s: Méiyǒu xiāngyìng de wénjiàn hé mùlù"
fmt_not_a_directory="%s: Bùshì mùlù"
fmt_unable_to_create_binary_archive="%s: Wúfǎ chuàngjiàn èrjìnzhì cúndàng"
msg_base_library="Jīchǔ kù (-b)"
msg_cleanup="Qīnglǐ"
msg_copy_contents_to_tmpdir="Jiāng nèiróng fùzhì dào tmpdir"
msg_copy_system_dependencies="Fùzhì xìtǒng yīlài xiàng"
msg_debug="TIÁOSHÌ"
msg_dry_run_dont_actually_create_anything="Kōng yùnxíng. Shíjì shang bù chuàngjiàn rènhé dōngxī."
msg_dry_run_enabled="Qǐyòng kōng yùnxíng (-n). Bù huì zhíxíng zuìzhōng ānzhuāng."
msg_enable_additional_debugging_statements="Qǐyòng qítā tiáoshì yǔjù."
msg_fatal="ZHÌMÌNG"
msg_force_create_even_if_already_exists="Lì. Jíshǐ yǐjīng cúnzài yě chuàngjiàn."
msg_get_version="Huòqǔ bǎnběn"
msg_include_system_library_dependencies="Bāokuò xìtǒng kù yīlài xiàng."
msg_missing_package_or_path_argument="Quēshǎo bāo huò lùjìng cānshù"
msg_missing_r_interpreter_argument="Quēshǎo R jiěshì qì cānshù"
msg_options="Xuǎnxiàng"
msg_print_help_message="Jiāng bāngzhù xiāoxī dǎyìn dào stderr bìng tuìchū."
msg_produce_tarball="Chǎnshēng tarball"
msg_success="CHÉNGGŌNG"
msg_unable_to_determine_library_path="Wúfǎ quèdìng kù lùjìng"
msg_unable_to_determine_platform_string="Wúfǎ quèdìng píngtái zìfú chuàn"
msg_usage="Yòngfǎ"
msg_use_patchelf_on_executables="Zài kě zhíxíng wénjiàn shàng shǐyòng patchelf. Biǎoshì\`-l'."
msg_warning="JǏNGGÀO"
;;
*) # English
fmt_already_exists="%s: Already exists"
fmt_command_not_found="%s: command not found"
fmt_is_a_directory="%s: Is a directory"
fmt_no_such_file_or_directory="%s: No such file or directory"
fmt_not_a_directory="%s: Not a directory"
fmt_unable_to_create_binary_archive="%s: Unable to create binary archive"
msg_base_library="base library (-b)"
msg_cleanup="Cleanup"
msg_copy_contents_to_tmpdir="Copy contents to tmpdir"
msg_copy_system_dependencies="Copy system dependencies"
msg_debug="DEBUG"
msg_dry_run_dont_actually_create_anything="Dry run. Dont actually create anything."
msg_dry_run_enabled="Dry run enabled (-n). Final install will not be performed."
msg_enable_additional_debugging_statements="Enable additional debugging statements."
msg_fatal="FATAL"
msg_force_create_even_if_already_exists="Force. Create even if already exists."
msg_get_version="Get version"
msg_include_system_library_dependencies="Include system library dependencies."
msg_missing_package_or_path_argument="Missing package or path argument"
msg_missing_r_interpreter_argument="Missing R interpreter argument"
msg_options="Options"
msg_print_help_message="Print help message to stderr and exit."
msg_produce_tarball="Produce tarball"
msg_success="SUCCESS"
msg_unable_to_determine_library_path="Unable to determine library path"
msg_unable_to_determine_platform_string="Unable to determine platform string"
msg_usage="Usage"
msg_use_patchelf_on_executables="Use patchelf on executables. Implies \`-l'."
msg_warning="WARNING"
esac

############################################################ FUNCTIONS

have(){ type "$@" > /dev/null 2>&1; }

usage()
{
	local optfmt="\t%-10s %s\n"
	exec >&2
	printf "$msg_usage: %s %s [-fhn] [--] " "$VCR_PROGRAM" "$pgm"
	if [ "$R_INHERITED" ]; then
		printf "pkg | path ...\n"
	else
		printf "R pkg | path ...\n"
	fi
	printf "$msg_options:\n"
	printf "$optfmt" "-D" "$msg_enable_additional_debugging_statements"
	printf "$optfmt" "-f" "$msg_force_create_even_if_already_exists"
	printf "$optfmt" "-h" "$msg_print_help_message"
	printf "$optfmt" "-n" "$msg_dry_run_dont_actually_create_anything"
	printf "$optfmt" "-l" "$msg_include_system_library_dependencies"
	printf "$optfmt" "-p" "$msg_use_patchelf_on_executables"
	printf "$R $msg_base_library:\n"
	printf "\t%s\n" "$( Rcat '.libPaths(.Library)' 3> /dev/null )"
	exit $FAILURE
}

exec 3<&1
if [ -t 1 ]; then # stdout is a tty
	eval2(){ printf "\e[2m%s\e[m\n" "$*" >&3; eval "$@"; }
	step(){ printf "\e[32;1m==>\e[39m %s\e[m\n" "$*"; }
	step2(){ [ ! "$VCR_DEBUG" ] ||
		printf "\e[32;1m->\e[39m %s\e[m\n" "$*"; }
	step3(){ [ ! "$VCR_DEBUG" ] ||
		printf "\e[32;1m>\e[39m %s\e[m\n" "$*"; }
	warn(){ printf "\e[33;1m$msg_warning!\e[m %s\n" "$*" >&2; }

	die()
	{
		local fmt="$1"
		if [ "$fmt" ]; then
			shift 1 # fmt
			printf "\e[1;31m$msg_fatal!\e[m $fmt\n" "$@" >&2
		fi
		exit $FAILURE
	}

	debug()
	{
		[ ! "$VCR_DEBUG" ] && return
		local fmt="$1"
		shift 1 # fmt
		printf "\e[35m$msg_debug\e[m $fmt\n" "$@" >&2
	}

else # stdout is not a tty
	eval2(){ printf "%s\n" "$*" >&3; eval "$@"; }
	step(){ printf "==> %s\n" "$*"; }
	step2(){ [ ! "$VCR_DEBUG" ] || printf "%s %s\n" "->" "$*"; }
	step3(){ [ ! "$VCR_DEBUG" ] || printf "> %s\n" "$*"; }
	warn(){ printf "$msg_warning! %s\n" "$*" >&2; }

	die()
	{
		local fmt="$1"
		if [ "$fmt" ]; then
			shift 1 # fmt
			printf "$msg_fatal! $fmt\n" "$@" >&2
		fi
		exit $FAILURE
	}

	debug()
	{
		[ ! "$VCR_DEBUG" ] && return
		local fmt="$1"
		shift 1 # fmt
		printf "$msg_debug $fmt\n" "$@" >&2
	}
fi

R()
{
	eval2 command $R --slave --no-restore "$@"
}

Rcat()
{
	R -e "'cat(paste0($1, \"\n\"))'"
}

item2path()
{
	local __item="$1" __var_to_set="$2"
	local __path

	[ "$__var_to_set" ] && eval $__var_to_set=

	case "$__item" in
	*/*) __path="$__item" ;;
	*)
		if [ -e "$__item" ]; then
			__path="$__item"
		else
			__path="$LIBRARY/$__item"
		fi
	esac

	if [ "$__var_to_set" ]; then
		eval $__var_to_set=\"\$__path\"
	else
		echo "$__path"
	fi
}

patchelves()
{
	local file exclude excluded dest path rpath
	local lib libs libname

	for file in "$@"; do
		case "$( file -s "$file" )" in
		*": "*ELF*) : fall through ;;
		*) continue
		esac
		libs=$( eval2 ldd "$file" | awk '/=>/&&$3~"^/"{print $3}' )
		[ "$libs" ] || continue

		eval2 mkdir -p "$TMPDIR/$NAME/.lib"
		for lib in $libs; do
			libname="${lib##*/}"
			excluded=
			for exclude in $LIBEXCLUDE; do
				[ "$exclude" = "$libname" ] || continue
				excluded=1
				break
			done
			if [ "$excluded" ]; then
				debug "%s excluded" "$lib"
				continue # Do not pack
			fi

			dest="$TMPDIR/$NAME/.lib/$libname"
			[ ! -e "$dest" ] || continue
			eval2 cp -RL "$lib" "$dest"
			[ -w "$dest" ] || eval2 chmod u+w "$dest"
		done

		[ "$USE_PATCHELF" ] || continue

		path="${file#"$TMPDIR/$NAME/"}"
		case "$path" in
		.lib/*)
			rpath=$( echo "$path" | awk '{
				sub("^[^/]+/", "")
				gsub("[^/]+/", "../")
				sub("/?[^/]*$", "")
				sub(/^/, "$ORIGIN/")
				sub("/$", "")
				print
			}' ) ;;
		*)
			rpath=$( echo "$path" | awk '{
				gsub("[^/]+/", "../")
				sub("^/?", "$ORIGIN/")
				sub("[^/]+$", ".lib")
				print
			}' )
		esac
		eval2 patchelf --set-rpath "'$rpath'" $file
	done
}

if have realpath; then
	: good
elif have readlink; then
	realpath(){ readlink -f "$@"; }
elif have perl; then
	realpath(){ perl -le 'use Cwd; print Cwd::abs_path(@ARGV);' -- "$@"; }
else
	realpath(){ echo "$@"; }
fi

############################################################ MAIN

set -e # errexit

#
# Process command-line options
#
while getopts Dfhlnp flag; do
	case "$flag" in
	D) VCR_DEBUG=1 ;;
	f) FORCE=1 ;;
	h) HELP=1 ;;
	l) PACKLIBS=1 ;;
	n) DRYRUN=1
	   warn "$msg_dry_run_enabled" ;;
	p) USE_PATCHELF=1 ;;
	*) usage # NOTREACHED
	esac
done
shift $(( $OPTIND - 1 ))

#
# Check invocation
#
if [ $# -lt 1 ]; then
	if [ "$R_INHERITED" ]; then
		if [ ! "$HELP" ]; then
			warn "$msg_missing_package_or_path_argument"
			usage
			# NOTREACHED
		fi
	elif [ ! "$HELP" ]; then
		warn "$msg_missing_r_interpreter_argument"
		usage
		# NOTREACHED
	fi
fi
if [ ! "$R_INHERITED" ]; then
	if [ $# -gt 0 ]; then
		R="$1"
		shift 1 # R
	fi
	if [ $# -lt 1 -a ! "$HELP" ]; then
		warn "Missing package or path argument"
		usage
		# NOTREACHED
	fi
fi

#
# Display usage with proper base LIBRARY if given `-h'
#
[ ! "$HELP" ] || usage # NOTREACHED

#
# Get R base library path and binary platform string
#
LIBRARY=$( Rcat ".libPaths(.Library)" ) ||
	die "$msg_unable_to_determine_library_path"
R_PLATFORM=R_$( Rcat 'R.version$platform' ) ||
	die "$msg_unable_to_determine_platform_string"

#
# Check command-line arguments
#
for item in "$@"; do
	item2path "$item" path
	[ -e "$path" ] || die "$fmt_no_such_file_or_directory" "$path"
	[ -d "$path" ] || die "$fmt_not_a_directory" "$path"
	[ -e "$path/DESCRIPTION" ] ||
		die "$fmt_no_such_file_or_directory" "${path%/}/DESCRIPTION"
done

#
# Check outputs
#
if [ ! "$FORCE" ]; then
	for item in "$@"; do
		item2path "$item" path
		vers=$( awk '
			sub(/^Version:/,""){print $1;exit}
		' "$path/DESCRIPTION" )
		NAME="${path%/}"
		NAME="${NAME##*/}"
		outp="${NAME}_${vers}_$R_PLATFORM.tar.gz"
		[ ! -d "$outp" ] || die "$fmt_is_a_directory" "$outp"
		[ ! -e "$outp" ] || die "$fmt_already_exists" "$outp"
	done
fi

#
# Optional functionality
#
if [ "$USE_PATCHELF" ]; then
	have patchelf || die "fmt_command_not_found" "patchelf"
fi

#
# Process command-line arguments
#
for item in "$@"; do
	step "$item"
	item2path "$item" path
	case "$path" in
	/) : ok ;;
	*/) path="${path%/}" ;;
	esac
	[ "$path" ] || continue

	step2 "$msg_get_version"
	vers=$( awk '
		sub(/^Version:/,""){print $1;exit}
	' "$path/DESCRIPTION" )
	NAME="${path##*/}"
	outp="${NAME}_${vers}_$R_PLATFORM.tar.gz"

	# Create working directory
	TMPDIR="$NAME.$VCR_PROGRAM.$$"
	eval2 mkdir -p "$TMPDIR"
	cleanup='rm -Rf "$TMPDIR"'
	trap "$cleanup" EXIT

	# Produce tarball
	step2 "$msg_produce_tarball"
	eval2 R CMD INSTALL -l "$TMPDIR" --build "$path"
	eval2 rm -Rf "$TMPDIR/$NAME"
	eval2 tar zxf "$outp" -C "$TMPDIR"
	eval2 rm -f "$outp"

	# Collect dependencies
	if [ "$PACKLIBS" -o "$USE_PATCHELF" ]; then
		step2 "$msg_copy_system_dependencies"
		patchelves $( eval2 find $TMPDIR/$NAME \
			-type f -not -path "'*/.lib/*'" )
		[ ! -e "$TMPDIR/$NAME/.lib" ] ||
			patchelves $( eval2 find $TMPDIR/$NAME/.lib -type f )
	fi

	# Reproduce tarball
	( cd "$TMPDIR" &&
		eval2 tar czf "../$outp" "$NAME" ) ||
		die "$fmt_unable_to_create_binary_archive" "$NAME"

	# Cleanup
	step3 "$msg_cleanup"
	trap - EXIT
	eval "$cleanup"
	cleanup= # Pedantic
done

step "$msg_success"
exit $SUCCESS

################################################################################
# END
################################################################################
